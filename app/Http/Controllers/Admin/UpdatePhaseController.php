<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Base\BaseController;
use App\Models\DessertStation;
use App\Models\UpdatePhase;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\MessageBag;

class UpdatePhaseController extends BaseController
{
    public function indexPage($station_id)
    {
        $view = 'admin.updatePhase.updatePhase';
        $station = DessertStation::query()->findOrFail($station_id);
        $parameters = ['station'=>$station];
        return parent::indexBase($view , $parameters); // Pass the $view variable to the parent method
    }
    public function index($id)
    {
        $lang = request()->header('Accept-Language') ?? 'en';
        $station = DessertStation::query()->where('id', $id)->first();
        if (!$station) {
            return response()->json([
                'status' => 404,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لإنشاء مرحلة لنظام التحلية' : 'Dessert station not found for the authenticated user.',
                'success' => false
            ], 404);
        }

        $data = UpdatePhase::where('station_id', $station->id)->get();

        $formattedData = $data->map(function($item) {
            $item->last_date = Carbon::parse($item->last_date)->format('Y-m-d');
            $item->next_date = Carbon::parse($item->next_date)->format('Y-m-d');
            return $item;
        });
//        if ($data->isEmpty()) {
//            return response()->json([
//                'status' => 404,
//                'message' => $lang == 'ar' ? 'لا يوجد مرحلة لنظام التحلية' :'No update phases found for the dessert station.',
//                'success' => false
//            ], 404);
//        }

        return response()->json([
            'status' => 200,
            'message' => $lang == 'ar' ? 'نجاح العملية' :'Success',
            'success' => true,
            'data' => $formattedData
        ]);

    }
    public function show($id)
    {
        $lang = request()->header('Accept-Language') ?? 'en';
        $station = DessertStation::query()->where('id',$id)->where('user_id', auth()->id())->first();
        if (!$station) {
            return response()->json([
                'status' => 403,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لمشاهدت نظام التحلية' :'You are not authorized to view this update phase.',
                'success' => false
            ], 403);
        }
        $model = DessertStation::class;
        return parent::showBase($id, $model); // TODO: Change the autogenerated stub
    }

    public function store(Request $request)
    {
        $lang = $request->header('Accept-Language') ?? 'en';
        $phase = UpdatePhase::query()->where('station_id',$request->station_id)->count();
        $station = DessertStation::query()->where('id',$request->station_id)->first();
        if ($station->phase > $phase){
            $model = UpdatePhase::class;
            $params = $request->all();
            $params['station_id'] = $station->id;
            $rules = [
                'last_date'=>'required',
                'next_date'=>'required',
                'time'=>'required|numeric|min:1',
            ];
            return parent::storeBase($model, $params, $rules, $lang); // TODO: Change the autogenerated stub
        }else{
            $errors = new MessageBag();
            $errors->add('Error', __('The data is wrong'));
            return response()->json([
                'status' => 403,
                'error' => $lang == 'ar' ? 'يجب الذهاب للنظام وزيادة عدد مراحله' :'Must by user create another Phase .',
                'success' => false
            ], 403);
        }
    }
    public function destroy($id)
    {
        $lang = request()->header('Accept-Language') ?? 'en';
        $phase = UpdatePhase::query()->where('id',$id)->first();
        if (!$phase) {
            return response()->json([
                'status' => 403,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لحذف هذا النظام' :'You are not authorized to delete this update phase.',
                'success' => false
            ], 403);
        }
        $model = UpdatePhase::class;
        return parent::destroyBase($id, $model,$lang); // TODO: Change the autogenerated stub
    }
}

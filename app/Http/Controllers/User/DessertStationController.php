<?php

namespace App\Http\Controllers\User;

use App\Http\Controllers\Base\BaseController;
use App\Models\DessertStation;
use Illuminate\Http\Request;

class DessertStationController extends BaseController
{
    public function index()
    {
        $lang = request()->header('Accept-Language') ?? 'en';
//        $arr=['id','user_id','phase','created_at','updated_at'];
//        $arr[] = ($lang == 'ar') ?  'name_ar as name' : 'name';
//        $data = DessertStation::query()
//            ->where('user_id', auth()->id())->select($arr)
//            ->get();

        $data = DessertStation::query()
            ->where('user_id', auth()->id())
            ->get();

        return response()->json([
            'status' => 200,
            'message' => $lang == 'ar' ? 'تمت العملية بنجاح': 'Success',
            'success' => true,
            'data' => $data,
        ]);
    }
    public function show($id)
    {
        $lang = request()->header('Accept-Language') ?? 'en';
        $station = DessertStation::query()->where('id',$id)->where('user_id', auth()->id())->first();
        if (!$station) {
            return response()->json([
                'status' => 403,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لمشاهدت نظام التحلية' :'You are not authorized to view this update phase.',
                'success' => false
            ], 403);
        }
        $model = DessertStation::class;
        return parent::showBase($id, $model); // TODO: Change the autogenerated stub
    }

    public function store(Request $request)
    {
        $lang = $request->header('Accept-Language') ?? 'en';
        $dess = DessertStation::query()->where('user_id',auth()->id())->count();
        if (auth()->user()->num_system > $dess){
            $model = DessertStation::class;
            $params = $request->all();
            $params['user_id'] = auth()->id();
            $rules = [
                'name'=>'required|string|min:3|max:100',
//                'name_ar'=>'required|string|min:3|max:100',
                'phase'=>'required|numeric|min:1',
            ];
            return parent::storeBase($model, $params, $rules, $lang); // TODO: Change the autogenerated stub
        }else{
            return response()->json([
                'status' => 403,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لإنشاء نظام تحلية آخر' :'You do not have permission to create another resolution model .',
                'success' => false
            ], 403);
        }
    }
    public function update($id)
    {
        $lang = request()->header('Accept-Language') ?? 'en';
        $station = DessertStation::query()->where('id',$id)->where('user_id', auth()->id())->first();
        if (!$station) {
            return response()->json([
                'status' => 403,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لرؤية هذا النظام' :'You are not authorized to view this update phase.',
                'success' => false
            ], 403);
        }
        $model = DessertStation::class;
        $params = \request()->all();
        $params['user_id'] = auth()->id();
        $rules = [
            'name'=>'required|string|min:3|max:100',
//            'name_ar'=>'required|string|min:3|max:100',
            'phase'=>'required|numeric|min:1',
        ];
        return parent::updateBase($id, $model, $params, $rules , $lang); // TODO: Change the autogenerated stub
    }
    public function destroy($id)
    {
        $lang = request()->header('Accept-Language') ?? 'en';
        $station = DessertStation::query()->where('id',$id)->where('user_id', auth()->id())->first();
        if (!$station) {
            return response()->json([
                'status' => 403,
                'message' => $lang == 'ar' ? 'ليس لديك صلاحية لحذف هذا النظام' :'You are not authorized to delete this update phase.',
                'success' => false
            ], 403);
        }
        $model = DessertStation::class;
        return parent::destroyBase($id, $model,$lang); // TODO: Change the autogenerated stub
    }
    public function getSearchStation(Request $request){
        $lang = $request->header('Accept-Language') ?? 'en';
//        $arr=['id','user_id','phase','created_at','updated_at'];
//        $arr[] = ($lang == 'ar') ?  'name_ar as name' : 'name';
        if(!$request->name_station_search){
            $dessert = DessertStation::query()->where('user_id', auth()->id())
                ->orderBy('id', 'ASC')->limit(10)
                ->get();
        } elseif($request->name_station_search){
            $dessert = DessertStation::query()
                ->where('user_id', auth()->id())
                ->where('name', 'LIKE',"%$request->name_station_search%")
                ->orderBy('id', 'ASC')
                ->get();
        }
        return response()->json([
            'status' => 200,
            'success' => false,
            'dessert'=>$dessert
        ] );

    }
}
